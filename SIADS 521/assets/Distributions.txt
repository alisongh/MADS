{
	"type": "start",
	"message": "Started Recording at: Tue May 14 2019 13:57:25 GMT-0400 (EDT)"
},{
	"type": "Line",
	"cell index": 1,
	"cell type": "code",
	"line number": 1,
	"line text": "#So, to make the idea of a distribution a bit more concrete, let's look at a canonical example: a die ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:57:36 PM",
	"offset-from-start": "00:00:11.0",
	"offset-from-previous-event": "11.046s"
},{
	"type": "Line",
	"cell index": 1,
	"cell type": "code",
	"line number": 2,
	"line text": "#roll. Assuming we have a fair die, we'd have a 1/6 chance of landing on any particular side. So, the ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:57:46 PM",
	"offset-from-start": "00:00:20.7",
	"offset-from-previous-event": "9.705s"
},{
	"type": "Line",
	"cell index": 1,
	"cell type": "code",
	"line number": 3,
	"line text": "#probability distribution looks like this:",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:57:54 PM",
	"offset-from-start": "00:00:28.6",
	"offset-from-previous-event": "7.948s"
},{
	"type": "Line",
	"cell index": 1,
	"cell type": "code",
	"line number": 4,
	"line text": "%matplotlib inline",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:57:57 PM",
	"offset-from-start": "00:00:32.0",
	"offset-from-previous-event": "3.313s"
},{
	"type": "Line",
	"cell index": 1,
	"cell type": "code",
	"line number": 5,
	"line text": "import matplotlib.pyplot as plt",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:58:00 PM",
	"offset-from-start": "00:00:34.5",
	"offset-from-previous-event": "2.551s"
},{
	"type": "Line",
	"cell index": 1,
	"cell type": "code",
	"line number": 6,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:58:01 PM",
	"offset-from-start": "00:00:35.4",
	"offset-from-previous-event": "0.896s"
},{
	"type": "Line",
	"cell index": 1,
	"cell type": "code",
	"line number": 7,
	"line text": "plt.bar(list(range(1,7)), [1/6 for i in range(6)])",
	"move cursor": true,
	"next cell": false,
	"timestamp": "1:58:02 PM",
	"offset-from-start": "00:00:36.6",
	"offset-from-previous-event": "1.147s"
},{
	"type": "Line",
	"cell index": 1,
	"cell type": "code",
	"line number": 7,
	"line text": "plt.bar(list(range(1,7)), [1/6 for i in range(6)])",
	"move cursor": false,
	"next cell": true,
	"timestamp": "1:58:04 PM",
	"offset-from-start": "00:00:38.2",
	"offset-from-previous-event": "1.667s"
},{
	"type": "Execution",
	"cell index": 1,
	"cell text": "#So, to make the idea of a distribution a bit more concrete, let's look at a canonical example: a die \n#roll. Assuming we have a fair die, we'd have a 1/6 chance of landing on any particular side. So, the \n#probability distribution looks like this:\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nplt.bar(list(range(1,7)), [1/6 for i in range(6)])",
	"timestamp": "1:58:04 PM",
	"offset-from-start": "00:00:38.2",
	"offset-from-previous-event": "0.005s"
},{
	"type": "Line",
	"cell index": 2,
	"cell type": "markdown",
	"line number": 1,
	"line text": "|            6-sided die         |         12-sided die              |           120-sided die              |",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:58:05 PM",
	"offset-from-start": "00:00:40.0",
	"offset-from-previous-event": "1.725s"
},{
	"type": "Line",
	"cell index": 2,
	"cell type": "markdown",
	"line number": 2,
	"line text": "|:------------------------------:| :-------------------------------: | :----------------------------------: |",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:58:06 PM",
	"offset-from-start": "00:00:40.9",
	"offset-from-previous-event": "0.943s"
},{
	"type": "Line",
	"cell index": 2,
	"cell type": "markdown",
	"line number": 3,
	"line text": "|![6-sided die](6_sided_die.jpg) | ![12-sided die](12_sided_die.jpg) |  ![120-sided die](120_sided_die.jpg) |",
	"move cursor": true,
	"next cell": false,
	"timestamp": "1:58:07 PM",
	"offset-from-start": "00:00:41.9",
	"offset-from-previous-event": "1.009s"
},{
	"type": "Line",
	"cell index": 2,
	"cell type": "markdown",
	"line number": 3,
	"line text": "|![6-sided die](6_sided_die.jpg) | ![12-sided die](12_sided_die.jpg) |  ![120-sided die](120_sided_die.jpg) |",
	"move cursor": false,
	"next cell": true,
	"timestamp": "1:58:08 PM",
	"offset-from-start": "00:00:42.9",
	"offset-from-previous-event": "1.03s"
},{
	"type": "Render",
	"cell index": 2,
	"cell text": "|            6-sided die         |         12-sided die              |           120-sided die              |\n|:------------------------------:| :-------------------------------: | :----------------------------------: |\n|![6-sided die](6_sided_die.jpg) | ![12-sided die](12_sided_die.jpg) |  ![120-sided die](120_sided_die.jpg) |",
	"timestamp": "1:58:08 PM",
	"offset-from-start": "00:00:42.9",
	"offset-from-previous-event": "0.008s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 1,
	"line text": "#In this case, we only have a fixed number of outcomes. But, what if we have a 12-sided die,",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:58:10 PM",
	"offset-from-start": "00:00:45.0",
	"offset-from-previous-event": "2.106s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 2,
	"line text": "#or a 120-sided die? Or a million? The probability of getting any particular number would get",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:58:18 PM",
	"offset-from-start": "00:00:52.9",
	"offset-from-previous-event": "7.829s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 3,
	"line text": "#closer and closer to zero, and it's almost as if we're working with continuous data.",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:58:26 PM",
	"offset-from-start": "00:01:00.3",
	"offset-from-previous-event": "7.462s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 4,
	"line text": "#In other words, it becomes equally likely for some random variable X to take on outcomes somewhere ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:58:32 PM",
	"offset-from-start": "00:01:06.6",
	"offset-from-previous-event": "6.292s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 5,
	"line text": "#between a range of values. Then, we'd end up with something called a uniform distribution, which looks ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:58:40 PM",
	"offset-from-start": "00:01:14.9",
	"offset-from-previous-event": "8.313s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 6,
	"line text": "#like a flat top:",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:58:44 PM",
	"offset-from-start": "00:01:18.2",
	"offset-from-previous-event": "3.216s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 7,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:58:50 PM",
	"offset-from-start": "00:01:24.5",
	"offset-from-previous-event": "6.291s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 8,
	"line text": "#Let's go ahead and plot a uniform distribution between -1 and 1. ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:58:53 PM",
	"offset-from-start": "00:01:27.2",
	"offset-from-previous-event": "2.792s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 9,
	"line text": "import numpy as np ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:58:57 PM",
	"offset-from-start": "00:01:31.9",
	"offset-from-previous-event": "4.639s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 10,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:58:59 PM",
	"offset-from-start": "00:01:33.2",
	"offset-from-previous-event": "1.352s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 11,
	"line text": "start = -1",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:59:00 PM",
	"offset-from-start": "00:01:34.9",
	"offset-from-previous-event": "1.664s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 12,
	"line text": "stop = 1",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:59:03 PM",
	"offset-from-start": "00:01:37.2",
	"offset-from-previous-event": "2.28s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 13,
	"line text": "x_range = stop - start",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:59:05 PM",
	"offset-from-start": "00:01:39.2",
	"offset-from-previous-event": "2s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 14,
	"line text": "n = 10",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:59:07 PM",
	"offset-from-start": "00:01:41.9",
	"offset-from-previous-event": "2.672s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 15,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:59:11 PM",
	"offset-from-start": "00:01:45.5",
	"offset-from-previous-event": "3.68s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 16,
	"line text": "#Here, I'll concatenate three lists together. One for each portion of the distribution: where",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:59:16 PM",
	"offset-from-start": "00:01:50.7",
	"offset-from-previous-event": "5.193s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 17,
	"line text": "#y is 0 before the specified starting value, where y is 1 between our selected range of values,",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:59:21 PM",
	"offset-from-start": "00:01:55.7",
	"offset-from-previous-event": "4.935s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 18,
	"line text": "#and where y is 1 after our stopping value. ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:59:32 PM",
	"offset-from-start": "00:02:06.8",
	"offset-from-previous-event": "11.114s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 19,
	"line text": "x = list(np.linspace(start - x_range, start, n+1)) + \\",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:59:38 PM",
	"offset-from-start": "00:02:13.0",
	"offset-from-previous-event": "6.182s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 20,
	"line text": "    list(np.linspace(start, stop, n+1)) + \\",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:59:41 PM",
	"offset-from-start": "00:02:15.4",
	"offset-from-previous-event": "2.432s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 21,
	"line text": "    list(np.linspace(stop, stop + x_range, n+1))",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:59:42 PM",
	"offset-from-start": "00:02:16.4",
	"offset-from-previous-event": "0.968s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 22,
	"line text": "y = [0 for i in range(n+1)] + [1/(x_range) for i in range(n+1)] +  [0 for i in range(n+1)]",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:59:44 PM",
	"offset-from-start": "00:02:18.9",
	"offset-from-previous-event": "2.545s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 23,
	"line text": "plt.plot(x, y)",
	"move cursor": true,
	"next cell": false,
	"timestamp": "1:59:50 PM",
	"offset-from-start": "00:02:24.6",
	"offset-from-previous-event": "5.69s"
},{
	"type": "Line",
	"cell index": 3,
	"cell type": "code",
	"line number": 23,
	"line text": "plt.plot(x, y)",
	"move cursor": false,
	"next cell": true,
	"timestamp": "1:59:52 PM",
	"offset-from-start": "00:02:26.6",
	"offset-from-previous-event": "2.027s"
},{
	"type": "Execution",
	"cell index": 3,
	"cell text": "#In this case, we only have a fixed number of outcomes. But, what if we have a 12-sided die,\n#or a 120-sided die? Or a million? The probability of getting any particular number would get\n#closer and closer to zero, and it's almost as if we're working with continuous data.\n#In other words, it becomes equally likely for some random variable X to take on outcomes somewhere \n#between a range of values. Then, we'd end up with something called a uniform distribution, which looks \n#like a flat top:\n\n#Let's go ahead and plot a uniform distribution between -1 and 1. \nimport numpy as np \n\nstart = -1\nstop = 1\nx_range = stop - start\nn = 10\n\n#Here, I'll concatenate three lists together. One for each portion of the distribution: where\n#y is 0 before the specified starting value, where y is 1 between our selected range of values,\n#and where y is 1 after our stopping value. \nx = list(np.linspace(start - x_range, start, n+1)) + \\\n    list(np.linspace(start, stop, n+1)) + \\\n    list(np.linspace(stop, stop + x_range, n+1))\ny = [0 for i in range(n+1)] + [1/(x_range) for i in range(n+1)] +  [0 for i in range(n+1)]\nplt.plot(x, y)",
	"timestamp": "1:59:52 PM",
	"offset-from-start": "00:02:26.6",
	"offset-from-previous-event": "0.004s"
},{
	"type": "Line",
	"cell index": 4,
	"cell type": "markdown",
	"line number": 1,
	"line text": "### Terminology: PDFs vs. CDFs",
	"move cursor": true,
	"next cell": false,
	"timestamp": "1:59:54 PM",
	"offset-from-start": "00:02:28.2",
	"offset-from-previous-event": "1.59s"
},{
	"type": "Line",
	"cell index": 4,
	"cell type": "markdown",
	"line number": 1,
	"line text": "### Terminology: PDFs vs. CDFs",
	"move cursor": false,
	"next cell": true,
	"timestamp": "1:59:55 PM",
	"offset-from-start": "00:02:29.3",
	"offset-from-previous-event": "1.094s"
},{
	"type": "Render",
	"cell index": 4,
	"cell text": "### Terminology: PDFs vs. CDFs",
	"timestamp": "1:59:55 PM",
	"offset-from-start": "00:02:29.3",
	"offset-from-previous-event": "0.007s"
},{
	"type": "Line",
	"cell index": 5,
	"cell type": "code",
	"line number": 1,
	"line text": "#Now, if I were to ask, \"What's the probability at EXACTLY x = 0.5 (with an infinite number of ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "1:59:56 PM",
	"offset-from-start": "00:02:30.8",
	"offset-from-previous-event": "1.458s"
},{
	"type": "Line",
	"cell index": 5,
	"cell type": "code",
	"line number": 2,
	"line text": "#zeros)?\". Well, the answer would be zero! So, a better question might be, \"What's the probability ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:00:04 PM",
	"offset-from-start": "00:02:39.0",
	"offset-from-previous-event": "8.265s"
},{
	"type": "Line",
	"cell index": 5,
	"cell type": "code",
	"line number": 3,
	"line text": "#of getting a value between 0.4 and 0.6?\" This would simply be the area under the curve between 0.4 and",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:00:16 PM",
	"offset-from-start": "00:02:50.3",
	"offset-from-previous-event": "11.269s"
},{
	"type": "Line",
	"cell index": 5,
	"cell type": "code",
	"line number": 4,
	"line text": "#0.6:",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:00:22 PM",
	"offset-from-start": "00:02:56.2",
	"offset-from-previous-event": "5.933s"
},{
	"type": "Line",
	"cell index": 5,
	"cell type": "code",
	"line number": 5,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:00:26 PM",
	"offset-from-start": "00:03:00.2",
	"offset-from-previous-event": "3.936s"
},{
	"type": "Line",
	"cell index": 5,
	"cell type": "code",
	"line number": 6,
	"line text": "#Let's shade in that region of the curve.",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:00:28 PM",
	"offset-from-start": "00:03:02.5",
	"offset-from-previous-event": "2.352s"
},{
	"type": "Line",
	"cell index": 5,
	"cell type": "code",
	"line number": 7,
	"line text": "import math",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:00:30 PM",
	"offset-from-start": "00:03:04.3",
	"offset-from-previous-event": "1.762s"
},{
	"type": "Line",
	"cell index": 5,
	"cell type": "code",
	"line number": 8,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:00:30 PM",
	"offset-from-start": "00:03:05.0",
	"offset-from-previous-event": "0.76s"
},{
	"type": "Line",
	"cell index": 5,
	"cell type": "code",
	"line number": 9,
	"line text": "plt.plot(x, y)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:00:32 PM",
	"offset-from-start": "00:03:06.6",
	"offset-from-previous-event": "1.521s"
},{
	"type": "Line",
	"cell index": 5,
	"cell type": "code",
	"line number": 10,
	"line text": "plt.fill_between([0.4, 0.6], 0.5, alpha=0.5)",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:00:35 PM",
	"offset-from-start": "00:03:09.1",
	"offset-from-previous-event": "2.576s"
},{
	"type": "Line",
	"cell index": 5,
	"cell type": "code",
	"line number": 10,
	"line text": "plt.fill_between([0.4, 0.6], 0.5, alpha=0.5)",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:00:36 PM",
	"offset-from-start": "00:03:10.1",
	"offset-from-previous-event": "0.973s"
},{
	"type": "Execution",
	"cell index": 5,
	"cell text": "#Now, if I were to ask, \"What's the probability at EXACTLY x = 0.5 (with an infinite number of \n#zeros)?\". Well, the answer would be zero! So, a better question might be, \"What's the probability \n#of getting a value between 0.4 and 0.6?\" This would simply be the area under the curve between 0.4 and\n#0.6:\n\n#Let's shade in that region of the curve.\nimport math\n\nplt.plot(x, y)\nplt.fill_between([0.4, 0.6], 0.5, alpha=0.5)",
	"timestamp": "2:00:36 PM",
	"offset-from-start": "00:03:10.1",
	"offset-from-previous-event": "0.004s"
},{
	"type": "Line",
	"cell index": 6,
	"cell type": "markdown",
	"line number": 1,
	"line text": "$$Area = h * w = 0.5 * \\frac{1}{0.6-0.4} = 0.1$$",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:00:37 PM",
	"offset-from-start": "00:03:11.7",
	"offset-from-previous-event": "1.582s"
},{
	"type": "Line",
	"cell index": 6,
	"cell type": "markdown",
	"line number": 1,
	"line text": "$$Area = h * w = 0.5 * \\frac{1}{0.6-0.4} = 0.1$$",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:00:38 PM",
	"offset-from-start": "00:03:12.4",
	"offset-from-previous-event": "0.726s"
},{
	"type": "Render",
	"cell index": 6,
	"cell text": "$$Area = h * w = 0.5 * \\frac{1}{0.6-0.4} = 0.1$$",
	"timestamp": "2:00:38 PM",
	"offset-from-start": "00:03:12.4",
	"offset-from-previous-event": "0.01s"
},{
	"type": "Line",
	"cell index": 7,
	"cell type": "markdown",
	"line number": 1,
	"line text": "The plot above is an example of a probability density function, which has the important property",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:00:47 PM",
	"offset-from-start": "00:03:21.4",
	"offset-from-previous-event": "9.008s"
},{
	"type": "Line",
	"cell index": 7,
	"cell type": "markdown",
	"line number": 2,
	"line text": "that every y-probability, corresponding to some x, must be between 0 and 1. Also, the",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:00:55 PM",
	"offset-from-start": "00:03:29.6",
	"offset-from-previous-event": "8.166s"
},{
	"type": "Line",
	"cell index": 7,
	"cell type": "markdown",
	"line number": 3,
	"line text": "total area under the curve MUST sum to one. After all, we're 100% guaranteed to land on *some* ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:01:00 PM",
	"offset-from-start": "00:03:35.0",
	"offset-from-previous-event": "5.419s"
},{
	"type": "Line",
	"cell index": 7,
	"cell type": "markdown",
	"line number": 4,
	"line text": "possible state. For those of you familiar with calculus, the probability of an outcome ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:01:06 PM",
	"offset-from-start": "00:03:40.2",
	"offset-from-previous-event": "5.164s"
},{
	"type": "Line",
	"cell index": 7,
	"cell type": "markdown",
	"line number": 5,
	"line text": "between a given range is, in general the following:",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:01:17 PM",
	"offset-from-start": "00:03:51.3",
	"offset-from-previous-event": "11.151s"
},{
	"type": "Line",
	"cell index": 7,
	"cell type": "markdown",
	"line number": 5,
	"line text": "between a given range is, in general the following:",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:01:19 PM",
	"offset-from-start": "00:03:53.4",
	"offset-from-previous-event": "2.014s"
},{
	"type": "Render",
	"cell index": 7,
	"cell text": "The plot above is an example of a probability density function, which has the important property\nthat every y-probability, corresponding to some x, must be between 0 and 1. Also, the\ntotal area under the curve MUST sum to one. After all, we're 100% guaranteed to land on *some* \npossible state. For those of you familiar with calculus, the probability of an outcome \nbetween a given range is, in general the following:",
	"timestamp": "2:01:19 PM",
	"offset-from-start": "00:03:53.4",
	"offset-from-previous-event": "0.006s"
},{
	"type": "Line",
	"cell index": 8,
	"cell type": "markdown",
	"line number": 1,
	"line text": "$$P(a < X < b) = \\int_a^b pdf(x) dx$$",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:01:20 PM",
	"offset-from-start": "00:03:54.8",
	"offset-from-previous-event": "1.387s"
},{
	"type": "Line",
	"cell index": 8,
	"cell type": "markdown",
	"line number": 1,
	"line text": "$$P(a < X < b) = \\int_a^b pdf(x) dx$$",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:01:21 PM",
	"offset-from-start": "00:03:55.6",
	"offset-from-previous-event": "0.798s"
},{
	"type": "Render",
	"cell index": 8,
	"cell text": "$$P(a < X < b) = \\int_a^b pdf(x) dx$$",
	"timestamp": "2:01:21 PM",
	"offset-from-start": "00:03:55.6",
	"offset-from-previous-event": "0.009s"
},{
	"type": "Line",
	"cell index": 9,
	"cell type": "markdown",
	"line number": 1,
	"line text": "However, don't worry if you aren't sure what an integral is. The main idea you need to know is that the ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:01:26 PM",
	"offset-from-start": "00:04:00.5",
	"offset-from-previous-event": "4.939s"
},{
	"type": "Line",
	"cell index": 9,
	"cell type": "markdown",
	"line number": 2,
	"line text": "probability that a random variable takes on a value between some range, is simply the area under that ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:01:36 PM",
	"offset-from-start": "00:04:11.0",
	"offset-from-previous-event": "10.506s"
},{
	"type": "Line",
	"cell index": 9,
	"cell type": "markdown",
	"line number": 3,
	"line text": "part of the curve.",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:02:04 PM",
	"offset-from-start": "00:04:38.7",
	"offset-from-previous-event": "27.661s"
},{
	"type": "Line",
	"cell index": 9,
	"cell type": "markdown",
	"line number": 3,
	"line text": "part of the curve.",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:02:05 PM",
	"offset-from-start": "00:04:39.4",
	"offset-from-previous-event": "0.749s"
},{
	"type": "Render",
	"cell index": 9,
	"cell text": "However, don't worry if you aren't sure what an integral is. The main idea you need to know is that the \nprobability that a random variable takes on a value between some range, is simply the area under that \npart of the curve.",
	"timestamp": "2:02:05 PM",
	"offset-from-start": "00:04:39.4",
	"offset-from-previous-event": "0.007s"
},{
	"type": "Line",
	"cell index": 10,
	"cell type": "code",
	"line number": 1,
	"line text": "#Something else you might run across is a CDF, or a cumulative distribution function. As the name implies, ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:02:08 PM",
	"offset-from-start": "00:04:42.1",
	"offset-from-previous-event": "2.691s"
},{
	"type": "Line",
	"cell index": 10,
	"cell type": "code",
	"line number": 2,
	"line text": "#this function *accumulates* probability and gives you the total probability of being less than or equal ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:02:24 PM",
	"offset-from-start": "00:04:58.9",
	"offset-from-previous-event": "16.771s"
},{
	"type": "Line",
	"cell index": 10,
	"cell type": "code",
	"line number": 3,
	"line text": "#to some x value. ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:02:32 PM",
	"offset-from-start": "00:05:06.4",
	"offset-from-previous-event": "7.551s"
},{
	"type": "Line",
	"cell index": 10,
	"cell type": "code",
	"line number": 4,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:02:33 PM",
	"offset-from-start": "00:05:07.8",
	"offset-from-previous-event": "1.392s"
},{
	"type": "Line",
	"cell index": 10,
	"cell type": "code",
	"line number": 5,
	"line text": "#So for example, what would the corresponding CDF look like for the uniform distribution above?",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:02:34 PM",
	"offset-from-start": "00:05:08.8",
	"offset-from-previous-event": "0.96s"
},{
	"type": "Line",
	"cell index": 10,
	"cell type": "code",
	"line number": 6,
	"line text": "#Well, at -1, we'd have accumulated zero probability, since P(X <= -1) = 0. ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:02:42 PM",
	"offset-from-start": "00:05:16.2",
	"offset-from-previous-event": "7.46s"
},{
	"type": "Line",
	"cell index": 10,
	"cell type": "code",
	"line number": 7,
	"line text": "#Now let's continue along the x-axis. At X=0, we've sort of split the distribution evenly in half,",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:02:55 PM",
	"offset-from-start": "00:05:29.2",
	"offset-from-previous-event": "12.963s"
},{
	"type": "Line",
	"cell index": 10,
	"cell type": "code",
	"line number": 8,
	"line text": "#and since the distribution is uniform, this means there's a 50% chance P(X <= 0).",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:03:07 PM",
	"offset-from-start": "00:05:41.8",
	"offset-from-previous-event": "12.602s"
},{
	"type": "Line",
	"cell index": 10,
	"cell type": "code",
	"line number": 9,
	"line text": "#Finally, the probability P(X <= 1) is 100%, and so, if we plot these points, we get some sort of ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:03:10 PM",
	"offset-from-start": "00:05:44.7",
	"offset-from-previous-event": "2.84s"
},{
	"type": "Line",
	"cell index": 10,
	"cell type": "code",
	"line number": 10,
	"line text": "#linear graph, where the area under the curve looks like a triangle.",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:03:18 PM",
	"offset-from-start": "00:05:52.9",
	"offset-from-previous-event": "8.203s"
},{
	"type": "Line",
	"cell index": 10,
	"cell type": "code",
	"line number": 11,
	"line text": "#For instance:",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:03:56 PM",
	"offset-from-start": "00:06:30.7",
	"offset-from-previous-event": "37.831s"
},{
	"type": "Line",
	"cell index": 10,
	"cell type": "code",
	"line number": 12,
	"line text": "y_cdf = [0 for i in range(n+1)] + [i/(n+1) for i in range(n+1)] +  [0 for i in range(n+1)]",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:03:59 PM",
	"offset-from-start": "00:06:33.7",
	"offset-from-previous-event": "3s"
},{
	"type": "Line",
	"cell index": 10,
	"cell type": "code",
	"line number": 13,
	"line text": "plt.plot(x, y_cdf)",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:04:01 PM",
	"offset-from-start": "00:06:35.4",
	"offset-from-previous-event": "1.666s"
},{
	"type": "Line",
	"cell index": 10,
	"cell type": "code",
	"line number": 13,
	"line text": "plt.plot(x, y_cdf)",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:04:03 PM",
	"offset-from-start": "00:06:37.8",
	"offset-from-previous-event": "2.484s"
},{
	"type": "Execution",
	"cell index": 10,
	"cell text": "#Something else you might run across is a CDF, or a cumulative distribution function. As the name implies, \n#this function *accumulates* probability and gives you the total probability of being less than or equal \n#to some x value. \n\n#So for example, what would the corresponding CDF look like for the uniform distribution above?\n#Well, at -1, we'd have accumulated zero probability, since P(X <= -1) = 0. \n#Now let's continue along the x-axis. At X=0, we've sort of split the distribution evenly in half,\n#and since the distribution is uniform, this means there's a 50% chance P(X <= 0).\n#Finally, the probability P(X <= 1) is 100%, and so, if we plot these points, we get some sort of \n#linear graph, where the area under the curve looks like a triangle.\n#For instance:\ny_cdf = [0 for i in range(n+1)] + [i/(n+1) for i in range(n+1)] +  [0 for i in range(n+1)]\nplt.plot(x, y_cdf)",
	"timestamp": "2:04:03 PM",
	"offset-from-start": "00:06:37.8",
	"offset-from-previous-event": "0.005s"
},{
	"type": "Line",
	"cell index": 11,
	"cell type": "markdown",
	"line number": 1,
	"line text": "### Other Common Types of Distributions",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:04:07 PM",
	"offset-from-start": "00:06:41.8",
	"offset-from-previous-event": "3.954s"
},{
	"type": "Line",
	"cell index": 11,
	"cell type": "markdown",
	"line number": 2,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:04:11 PM",
	"offset-from-start": "00:06:45.6",
	"offset-from-previous-event": "3.776s"
},{
	"type": "Line",
	"cell index": 11,
	"cell type": "markdown",
	"line number": 3,
	"line text": "Now, while a uniform distribution is easy to work with, in many practical applications, it's unlikely that every outcome will occur with equal probability. For, instance, we could fabricate some weighted dice. And, while we don't condone cheating on games, this would definitely alter our probability distribution!",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:04:15 PM",
	"offset-from-start": "00:06:49.6",
	"offset-from-previous-event": "4.004s"
},{
	"type": "Line",
	"cell index": 11,
	"cell type": "markdown",
	"line number": 4,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:04:20 PM",
	"offset-from-start": "00:06:54.6",
	"offset-from-previous-event": "5.064s"
},{
	"type": "Line",
	"cell index": 11,
	"cell type": "markdown",
	"line number": 5,
	"line text": "![weighted dice](weighted.jpg) ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:04:47 PM",
	"offset-from-start": "00:07:21.8",
	"offset-from-previous-event": "27.19s"
},{
	"type": "Line",
	"cell index": 11,
	"cell type": "markdown",
	"line number": 6,
	"line text": "",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:04:48 PM",
	"offset-from-start": "00:07:22.6",
	"offset-from-previous-event": "0.813s"
},{
	"type": "Render",
	"cell index": 11,
	"cell text": "### Other Common Types of Distributions\n\nNow, while a uniform distribution is easy to work with, in many practical applications, it's unlikely that every outcome will occur with equal probability. For, instance, we could fabricate some weighted dice. And, while we don't condone cheating on games, this would definitely alter our probability distribution!\n\n![weighted dice](weighted.jpg) \n",
	"timestamp": "2:04:48 PM",
	"offset-from-start": "00:07:22.7",
	"offset-from-previous-event": "0.01s"
},{
	"type": "Line",
	"cell index": 12,
	"cell type": "code",
	"line number": 1,
	"line text": "#So, there are numerous ways of weighting dice, some of which are shown in the pictures above. ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:04:50 PM",
	"offset-from-start": "00:07:24.5",
	"offset-from-previous-event": "1.848s"
},{
	"type": "Line",
	"cell index": 12,
	"cell type": "code",
	"line number": 2,
	"line text": "#Let's pretend we end up drilling holes. How might the probability distribution look now?",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:04:57 PM",
	"offset-from-start": "00:07:32.0",
	"offset-from-previous-event": "7.501s"
},{
	"type": "Line",
	"cell index": 12,
	"cell type": "code",
	"line number": 3,
	"line text": "plt.bar(list(range(1,7)), [1/10 if i != 5 else 1/2 for i in range(6)])",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:05:07 PM",
	"offset-from-start": "00:07:41.8",
	"offset-from-previous-event": "9.799s"
},{
	"type": "Line",
	"cell index": 12,
	"cell type": "code",
	"line number": 3,
	"line text": "plt.bar(list(range(1,7)), [1/10 if i != 5 else 1/2 for i in range(6)])",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:05:08 PM",
	"offset-from-start": "00:07:42.8",
	"offset-from-previous-event": "1.003s"
},{
	"type": "Execution",
	"cell index": 12,
	"cell text": "#So, there are numerous ways of weighting dice, some of which are shown in the pictures above. \n#Let's pretend we end up drilling holes. How might the probability distribution look now?\nplt.bar(list(range(1,7)), [1/10 if i != 5 else 1/2 for i in range(6)])",
	"timestamp": "2:05:08 PM",
	"offset-from-start": "00:07:42.8",
	"offset-from-previous-event": "0.006s"
},{
	"type": "Line",
	"cell index": 13,
	"cell type": "markdown",
	"line number": 1,
	"line text": "### Bernoulli and Binomial Distributions",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:05:10 PM",
	"offset-from-start": "00:07:44.4",
	"offset-from-previous-event": "1.613s"
},{
	"type": "Line",
	"cell index": 13,
	"cell type": "markdown",
	"line number": 2,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:05:11 PM",
	"offset-from-start": "00:07:45.3",
	"offset-from-previous-event": "0.854s"
},{
	"type": "Line",
	"cell index": 13,
	"cell type": "markdown",
	"line number": 3,
	"line text": "$$ Bin(k; n,p) = {n \\choose k} p^k (1-p)^{n-k}$$",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:05:11 PM",
	"offset-from-start": "00:07:46.1",
	"offset-from-previous-event": "0.786s"
},{
	"type": "Line",
	"cell index": 13,
	"cell type": "markdown",
	"line number": 3,
	"line text": "$$ Bin(k; n,p) = {n \\choose k} p^k (1-p)^{n-k}$$",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:05:13 PM",
	"offset-from-start": "00:07:47.3",
	"offset-from-previous-event": "1.27s"
},{
	"type": "Render",
	"cell index": 13,
	"cell text": "### Bernoulli and Binomial Distributions\n\n$$ Bin(k; n,p) = {n \\choose k} p^k (1-p)^{n-k}$$",
	"timestamp": "2:05:13 PM",
	"offset-from-start": "00:07:47.3",
	"offset-from-previous-event": "0.012s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 1,
	"line text": "#Of course, these distributions don't necessariliy have to refer to physical objects.",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:05:19 PM",
	"offset-from-start": "00:07:53.4",
	"offset-from-previous-event": "6.054s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 2,
	"line text": "#It's not often we come across a weighted coin, but there are many situations that are analogous to",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:05:25 PM",
	"offset-from-start": "00:07:59.4",
	"offset-from-previous-event": "5.979s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 3,
	"line text": "#flipping a weighted coin. For instance, say that we run a company that produces battery packs, and",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:05:34 PM",
	"offset-from-start": "00:08:08.4",
	"offset-from-previous-event": "8.977s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 4,
	"line text": "#we know that historically, roughly 3 in 1000 is defective. This is essentially flipping a weighted",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:05:47 PM",
	"offset-from-start": "00:08:21.3",
	"offset-from-previous-event": "12.942s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 5,
	"line text": "#coin where p = 0.003 (probability of a defect) and 1-p = 0.997 (probability of a working product).",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:05:57 PM",
	"offset-from-start": "00:08:31.4",
	"offset-from-previous-event": "10.097s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 6,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:06:13 PM",
	"offset-from-start": "00:08:47.8",
	"offset-from-previous-event": "16.391s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 7,
	"line text": "#This simple distribution with two outcomes is known as a Bernoulli distribution.",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:06:16 PM",
	"offset-from-start": "00:08:50.2",
	"offset-from-previous-event": "2.376s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 8,
	"line text": "#However, say we want to know how likely it is for us to get more than 50 defects out of of our ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:06:22 PM",
	"offset-from-start": "00:08:56.9",
	"offset-from-previous-event": "6.768s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 9,
	"line text": "#total batch of 10000 batteries? To answer this, we can turn to the binomial distribution. ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:06:26 PM",
	"offset-from-start": "00:09:00.9",
	"offset-from-previous-event": "3.984s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 10,
	"line text": "#The pdf is shown above, where p is the probability of a \"success\" (or in our case, we're defining",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:06:41 PM",
	"offset-from-start": "00:09:16.1",
	"offset-from-previous-event": "15.183s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 11,
	"line text": "#this as the probability of a defect), n is the total number of trials, and k is the number of ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:06:54 PM",
	"offset-from-start": "00:09:28.2",
	"offset-from-previous-event": "12.079s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 12,
	"line text": "#successes. But, before we continue, let's visualize the shape of this distribution ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:06:57 PM",
	"offset-from-start": "00:09:31.8",
	"offset-from-previous-event": "3.581s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 13,
	"line text": "#and plot the pdf for a simpler case with smaller parameters:",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:07:01 PM",
	"offset-from-start": "00:09:35.2",
	"offset-from-previous-event": "3.408s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 14,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:07:09 PM",
	"offset-from-start": "00:09:43.6",
	"offset-from-previous-event": "8.423s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 15,
	"line text": "#Notes: we've chosen a range of x values such that the distribution display ranges",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:07:12 PM",
	"offset-from-start": "00:09:46.2",
	"offset-from-previous-event": "2.608s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 16,
	"line text": "#from alpha = 0.01 to 0.99.  ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:07:21 PM",
	"offset-from-start": "00:09:55.2",
	"offset-from-previous-event": "9.011s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 17,
	"line text": "import scipy.stats as stats",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:07:22 PM",
	"offset-from-start": "00:09:57.0",
	"offset-from-previous-event": "1.785s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 18,
	"line text": "from scipy.stats import binom",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:07:26 PM",
	"offset-from-start": "00:10:00.6",
	"offset-from-previous-event": "3.574s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 19,
	"line text": "n, p = 100, 0.4",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:07:28 PM",
	"offset-from-start": "00:10:02.5",
	"offset-from-previous-event": "1.928s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 20,
	"line text": "x = np.arange(binom.ppf(0.01, n, p), binom.ppf(0.99, n, p))",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:07:30 PM",
	"offset-from-start": "00:10:04.5",
	"offset-from-previous-event": "1.969s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 21,
	"line text": "plt.plot(x, binom.pmf(x, n, p), 'bo', ms=8) #'bo' means blue circle marker, ms=marker size, and ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:07:35 PM",
	"offset-from-start": "00:10:09.3",
	"offset-from-previous-event": "4.815s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 22,
	"line text": "plt.xlim(20,60) #xlim sets the x-axis limits to range from 20 to 60. ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:07:44 PM",
	"offset-from-start": "00:10:18.9",
	"offset-from-previous-event": "9.667s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 23,
	"line text": "plt.title(\"Binomial Distribution for N=100, p=0.4\")",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:07:55 PM",
	"offset-from-start": "00:10:29.7",
	"offset-from-previous-event": "10.795s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 24,
	"line text": "plt.xlabel(\"Number of successes (k)\")",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:07:57 PM",
	"offset-from-start": "00:10:31.6",
	"offset-from-previous-event": "1.816s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 25,
	"line text": "plt.ylabel(\"P(k; n, p)\")",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:07:58 PM",
	"offset-from-start": "00:10:32.9",
	"offset-from-previous-event": "1.344s"
},{
	"type": "Line",
	"cell index": 14,
	"cell type": "code",
	"line number": 25,
	"line text": "plt.ylabel(\"P(k; n, p)\")",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:07:59 PM",
	"offset-from-start": "00:10:34.0",
	"offset-from-previous-event": "1.109s"
},{
	"type": "Execution",
	"cell index": 14,
	"cell text": "#Of course, these distributions don't necessariliy have to refer to physical objects.\n#It's not often we come across a weighted coin, but there are many situations that are analogous to\n#flipping a weighted coin. For instance, say that we run a company that produces battery packs, and\n#we know that historically, roughly 3 in 1000 is defective. This is essentially flipping a weighted\n#coin where p = 0.003 (probability of a defect) and 1-p = 0.997 (probability of a working product).\n\n#This simple distribution with two outcomes is known as a Bernoulli distribution.\n#However, say we want to know how likely it is for us to get more than 50 defects out of of our \n#total batch of 10000 batteries? To answer this, we can turn to the binomial distribution. \n#The pdf is shown above, where p is the probability of a \"success\" (or in our case, we're defining\n#this as the probability of a defect), n is the total number of trials, and k is the number of \n#successes. But, before we continue, let's visualize the shape of this distribution \n#and plot the pdf for a simpler case with smaller parameters:\n\n#Notes: we've chosen a range of x values such that the distribution display ranges\n#from alpha = 0.01 to 0.99.  \nimport scipy.stats as stats\nfrom scipy.stats import binom\nn, p = 100, 0.4\nx = np.arange(binom.ppf(0.01, n, p), binom.ppf(0.99, n, p))\nplt.plot(x, binom.pmf(x, n, p), 'bo', ms=8) #'bo' means blue circle marker, ms=marker size, and \nplt.xlim(20,60) #xlim sets the x-axis limits to range from 20 to 60. \nplt.title(\"Binomial Distribution for N=100, p=0.4\")\nplt.xlabel(\"Number of successes (k)\")\nplt.ylabel(\"P(k; n, p)\")",
	"timestamp": "2:07:59 PM",
	"offset-from-start": "00:10:34.0",
	"offset-from-previous-event": "0.006s"
},{
	"type": "Line",
	"cell index": 15,
	"cell type": "code",
	"line number": 1,
	"line text": "#Now returning to our original problem of calculating the probability of 50 defects",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:08:06 PM",
	"offset-from-start": "00:10:40.8",
	"offset-from-previous-event": "6.773s"
},{
	"type": "Line",
	"cell index": 15,
	"cell type": "code",
	"line number": 2,
	"line text": "#out of 10,000 batteries, we'd want to find P(50; 10000, 0.003)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:08:13 PM",
	"offset-from-start": "00:10:47.8",
	"offset-from-previous-event": "6.979s"
},{
	"type": "Line",
	"cell index": 15,
	"cell type": "code",
	"line number": 3,
	"line text": "#Fortunately, you won't have to calculate this by hand! We'll use a scipy package to ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:08:26 PM",
	"offset-from-start": "00:11:00.6",
	"offset-from-previous-event": "12.876s"
},{
	"type": "Line",
	"cell index": 15,
	"cell type": "code",
	"line number": 4,
	"line text": "#help us simplify the process:",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:08:35 PM",
	"offset-from-start": "00:11:09.9",
	"offset-from-previous-event": "9.23s"
},{
	"type": "Line",
	"cell index": 15,
	"cell type": "code",
	"line number": 5,
	"line text": "print(\"P(50; 10000, 0.003) =\", binom.pmf(50, 10000, 0.003))",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:08:37 PM",
	"offset-from-start": "00:11:11.2",
	"offset-from-previous-event": "1.288s"
},{
	"type": "Line",
	"cell index": 15,
	"cell type": "code",
	"line number": 6,
	"line text": "print(\"Probability of getting more than 50 defects:\", 1-binom.cdf(50, 10000, 0.003))",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:08:40 PM",
	"offset-from-start": "00:11:15.1",
	"offset-from-previous-event": "3.927s"
},{
	"type": "Line",
	"cell index": 15,
	"cell type": "code",
	"line number": 7,
	"line text": "#Note that getting more than 50 defects out of a batch of 10,000 isn't very likely at all!",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:08:47 PM",
	"offset-from-start": "00:11:21.7",
	"offset-from-previous-event": "6.608s"
},{
	"type": "Line",
	"cell index": 15,
	"cell type": "code",
	"line number": 7,
	"line text": "#Note that getting more than 50 defects out of a batch of 10,000 isn't very likely at all!",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:09:07 PM",
	"offset-from-start": "00:11:42.0",
	"offset-from-previous-event": "20.267s"
},{
	"type": "Execution",
	"cell index": 15,
	"cell text": "#Now returning to our original problem of calculating the probability of 50 defects\n#out of 10,000 batteries, we'd want to find P(50; 10000, 0.003)\n#Fortunately, you won't have to calculate this by hand! We'll use a scipy package to \n#help us simplify the process:\nprint(\"P(50; 10000, 0.003) =\", binom.pmf(50, 10000, 0.003))\nprint(\"Probability of getting more than 50 defects:\", 1-binom.cdf(50, 10000, 0.003))\n#Note that getting more than 50 defects out of a batch of 10,000 isn't very likely at all!",
	"timestamp": "2:09:07 PM",
	"offset-from-start": "00:11:42.0",
	"offset-from-previous-event": "0.005s"
},{
	"type": "Line",
	"cell index": 16,
	"cell type": "markdown",
	"line number": 1,
	"line text": "### Normal Distributions",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:09:09 PM",
	"offset-from-start": "00:11:43.6",
	"offset-from-previous-event": "1.648s"
},{
	"type": "Line",
	"cell index": 16,
	"cell type": "markdown",
	"line number": 2,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:09:11 PM",
	"offset-from-start": "00:11:45.4",
	"offset-from-previous-event": "1.751s"
},{
	"type": "Line",
	"cell index": 16,
	"cell type": "markdown",
	"line number": 3,
	"line text": "You may have noticed that the binomial distribution looks pretty similar to a normal distribution (bell curve). However, there are a few key diferences. For starters, one is a discrete distribution while the other is continuous. But, in a similar procedure discussed in the uniform distribution section above, if we let $N \\rightarrow \\infty$ or become sufficient large, the binomial distribution can be roughly approximated by a normal distribution with the following mean and variance:",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:09:14 PM",
	"offset-from-start": "00:11:48.3",
	"offset-from-previous-event": "2.956s"
},{
	"type": "Line",
	"cell index": 16,
	"cell type": "markdown",
	"line number": 4,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:09:50 PM",
	"offset-from-start": "00:12:24.8",
	"offset-from-previous-event": "36.469s"
},{
	"type": "Line",
	"cell index": 16,
	"cell type": "markdown",
	"line number": 5,
	"line text": "$$N(x | \\mu, \\sigma^2) = \\frac{1}{\\sqrt{2\\pi \\sigma^2}} e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}$$",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:09:51 PM",
	"offset-from-start": "00:12:25.5",
	"offset-from-previous-event": "0.696s"
},{
	"type": "Line",
	"cell index": 16,
	"cell type": "markdown",
	"line number": 6,
	"line text": "where",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:09:52 PM",
	"offset-from-start": "00:12:26.2",
	"offset-from-previous-event": "0.728s"
},{
	"type": "Line",
	"cell index": 16,
	"cell type": "markdown",
	"line number": 7,
	"line text": "$$\\mu = np$$",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:09:52 PM",
	"offset-from-start": "00:12:26.9",
	"offset-from-previous-event": "0.648s"
},{
	"type": "Line",
	"cell index": 16,
	"cell type": "markdown",
	"line number": 8,
	"line text": "and ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:09:53 PM",
	"offset-from-start": "00:12:27.7",
	"offset-from-previous-event": "0.849s"
},{
	"type": "Line",
	"cell index": 16,
	"cell type": "markdown",
	"line number": 9,
	"line text": "$$\\sigma^2 = np(1-p)$$",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:09:54 PM",
	"offset-from-start": "00:12:28.4",
	"offset-from-previous-event": "0.711s"
},{
	"type": "Line",
	"cell index": 16,
	"cell type": "markdown",
	"line number": 9,
	"line text": "$$\\sigma^2 = np(1-p)$$",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:09:55 PM",
	"offset-from-start": "00:12:29.3",
	"offset-from-previous-event": "0.91s"
},{
	"type": "Render",
	"cell index": 16,
	"cell text": "### Normal Distributions\n\nYou may have noticed that the binomial distribution looks pretty similar to a normal distribution (bell curve). However, there are a few key diferences. For starters, one is a discrete distribution while the other is continuous. But, in a similar procedure discussed in the uniform distribution section above, if we let $N \\rightarrow \\infty$ or become sufficient large, the binomial distribution can be roughly approximated by a normal distribution with the following mean and variance:\n\n$$N(x | \\mu, \\sigma^2) = \\frac{1}{\\sqrt{2\\pi \\sigma^2}} e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}$$\nwhere\n$$\\mu = np$$\nand \n$$\\sigma^2 = np(1-p)$$",
	"timestamp": "2:09:55 PM",
	"offset-from-start": "00:12:29.3",
	"offset-from-previous-event": "0.016s"
},{
	"type": "Line",
	"cell index": 17,
	"cell type": "code",
	"line number": 1,
	"line text": "#Let's plot the pdf for the normal distribution and calculate some simple statistics. ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:10:04 PM",
	"offset-from-start": "00:12:38.7",
	"offset-from-previous-event": "9.329s"
},{
	"type": "Line",
	"cell index": 17,
	"cell type": "code",
	"line number": 2,
	"line text": "#If we use the parameters n=100 and p=0.4 from before...",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:10:09 PM",
	"offset-from-start": "00:12:43.5",
	"offset-from-previous-event": "4.828s"
},{
	"type": "Line",
	"cell index": 17,
	"cell type": "code",
	"line number": 3,
	"line text": "mu = n * p",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:10:16 PM",
	"offset-from-start": "00:12:50.8",
	"offset-from-previous-event": "7.262s"
},{
	"type": "Line",
	"cell index": 17,
	"cell type": "code",
	"line number": 4,
	"line text": "variance = n * p * (1-p)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:10:17 PM",
	"offset-from-start": "00:12:52.0",
	"offset-from-previous-event": "1.248s"
},{
	"type": "Line",
	"cell index": 17,
	"cell type": "code",
	"line number": 5,
	"line text": "sigma = math.sqrt(variance)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:10:18 PM",
	"offset-from-start": "00:12:53.0",
	"offset-from-previous-event": "0.983s"
},{
	"type": "Line",
	"cell index": 17,
	"cell type": "code",
	"line number": 6,
	"line text": "x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100) #create range of x-values +/- 3 stddevs from 0",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:10:21 PM",
	"offset-from-start": "00:12:55.2",
	"offset-from-previous-event": "2.201s"
},{
	"type": "Line",
	"cell index": 17,
	"cell type": "code",
	"line number": 7,
	"line text": "plt.plot(x, stats.norm.pdf(x, mu, sigma))",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:10:29 PM",
	"offset-from-start": "00:13:04.1",
	"offset-from-previous-event": "8.858s"
},{
	"type": "Line",
	"cell index": 17,
	"cell type": "code",
	"line number": 8,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:10:31 PM",
	"offset-from-start": "00:13:05.9",
	"offset-from-previous-event": "1.84s"
},{
	"type": "Line",
	"cell index": 17,
	"cell type": "code",
	"line number": 9,
	"line text": "#Comparing this to what we had before...it's pretty close! The same functions that applied ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:10:36 PM",
	"offset-from-start": "00:13:10.9",
	"offset-from-previous-event": "5.031s"
},{
	"type": "Line",
	"cell index": 17,
	"cell type": "code",
	"line number": 10,
	"line text": "#before work here as well. ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:10:43 PM",
	"offset-from-start": "00:13:17.8",
	"offset-from-previous-event": "6.916s"
},{
	"type": "Line",
	"cell index": 17,
	"cell type": "code",
	"line number": 11,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:10:44 PM",
	"offset-from-start": "00:13:18.7",
	"offset-from-previous-event": "0.849s"
},{
	"type": "Line",
	"cell index": 17,
	"cell type": "code",
	"line number": 12,
	"line text": "prob = stats.norm.cdf(35, mu, variance)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:10:45 PM",
	"offset-from-start": "00:13:19.9",
	"offset-from-previous-event": "1.208s"
},{
	"type": "Line",
	"cell index": 17,
	"cell type": "code",
	"line number": 13,
	"line text": "print(\"P(x < 35) =\", prob)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:10:50 PM",
	"offset-from-start": "00:13:24.5",
	"offset-from-previous-event": "4.552s"
},{
	"type": "Line",
	"cell index": 17,
	"cell type": "code",
	"line number": 14,
	"line text": "x_vals = x[x < 35]",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:10:52 PM",
	"offset-from-start": "00:13:26.4",
	"offset-from-previous-event": "1.896s"
},{
	"type": "Line",
	"cell index": 17,
	"cell type": "code",
	"line number": 15,
	"line text": "plt.fill_between(x_vals, 0, stats.norm.pdf(x_vals, mu, sigma), alpha=0.5)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:10:55 PM",
	"offset-from-start": "00:13:29.7",
	"offset-from-previous-event": "3.328s"
},{
	"type": "Line",
	"cell index": 17,
	"cell type": "code",
	"line number": 16,
	"line text": "#If you want to play around a bit more with this function, here's a link to the documentation:",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:11:03 PM",
	"offset-from-start": "00:13:37.2",
	"offset-from-previous-event": "7.514s"
},{
	"type": "Line",
	"cell index": 17,
	"cell type": "code",
	"line number": 17,
	"line text": "#https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.norm.html",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:11:13 PM",
	"offset-from-start": "00:13:47.7",
	"offset-from-previous-event": "10.513s"
},{
	"type": "Line",
	"cell index": 17,
	"cell type": "code",
	"line number": 17,
	"line text": "#https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.norm.html",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:11:15 PM",
	"offset-from-start": "00:13:49.2",
	"offset-from-previous-event": "1.485s"
},{
	"type": "Execution",
	"cell index": 17,
	"cell text": "#Let's plot the pdf for the normal distribution and calculate some simple statistics. \n#If we use the parameters n=100 and p=0.4 from before...\nmu = n * p\nvariance = n * p * (1-p)\nsigma = math.sqrt(variance)\nx = np.linspace(mu - 3*sigma, mu + 3*sigma, 100) #create range of x-values +/- 3 stddevs from 0\nplt.plot(x, stats.norm.pdf(x, mu, sigma))\n\n#Comparing this to what we had before...it's pretty close! The same functions that applied \n#before work here as well. \n\nprob = stats.norm.cdf(35, mu, variance)\nprint(\"P(x < 35) =\", prob)\nx_vals = x[x < 35]\nplt.fill_between(x_vals, 0, stats.norm.pdf(x_vals, mu, sigma), alpha=0.5)\n#If you want to play around a bit more with this function, here's a link to the documentation:\n#https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.norm.html",
	"timestamp": "2:11:15 PM",
	"offset-from-start": "00:13:49.2",
	"offset-from-previous-event": "0.007s"
},{
	"type": "Line",
	"cell index": 18,
	"cell type": "code",
	"line number": 1,
	"line text": "#Normal distributions are frequently encountered in statistics, and we'll leverage our knowledge",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:11:22 PM",
	"offset-from-start": "00:13:56.2",
	"offset-from-previous-event": "6.967s"
},{
	"type": "Line",
	"cell index": 18,
	"cell type": "code",
	"line number": 2,
	"line text": "#of this to conduct statistical tests in the next section. Yet, what happens when we don't have",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:11:29 PM",
	"offset-from-start": "00:14:03.6",
	"offset-from-previous-event": "7.466s"
},{
	"type": "Line",
	"cell index": 18,
	"cell type": "code",
	"line number": 3,
	"line text": "#a good sense of what the population parameters are?",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:11:38 PM",
	"offset-from-start": "00:14:13.1",
	"offset-from-previous-event": "9.431s"
},{
	"type": "Line",
	"cell index": 18,
	"cell type": "code",
	"line number": 3,
	"line text": "#a good sense of what the population parameters are?",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:11:46 PM",
	"offset-from-start": "00:14:20.6",
	"offset-from-previous-event": "7.521s"
},{
	"type": "Execution",
	"cell index": 18,
	"cell text": "#Normal distributions are frequently encountered in statistics, and we'll leverage our knowledge\n#of this to conduct statistical tests in the next section. Yet, what happens when we don't have\n#a good sense of what the population parameters are?",
	"timestamp": "2:11:46 PM",
	"offset-from-start": "00:14:20.6",
	"offset-from-previous-event": "0.006s"
},{
	"type": "Line",
	"cell index": 19,
	"cell type": "markdown",
	"line number": 1,
	"line text": "### Population Versus Samples: t-Distribution",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:11:50 PM",
	"offset-from-start": "00:14:24.9",
	"offset-from-previous-event": "4.327s"
},{
	"type": "Line",
	"cell index": 19,
	"cell type": "markdown",
	"line number": 2,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:11:58 PM",
	"offset-from-start": "00:14:32.6",
	"offset-from-previous-event": "7.729s"
},{
	"type": "Line",
	"cell index": 19,
	"cell type": "markdown",
	"line number": 3,
	"line text": "In the case above, we somehow magically knew the firm's mean number of defects and standard deviation. In that case, looking at a normal distribution is appropriate. Another random variable that's normally distributed might be people's heights. If we ask everyone in the world to report their height, we could compute a mean and standard deviation for the entire population. ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:12:01 PM",
	"offset-from-start": "00:14:35.3",
	"offset-from-previous-event": "2.622s"
},{
	"type": "Line",
	"cell index": 19,
	"cell type": "markdown",
	"line number": 4,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:12:24 PM",
	"offset-from-start": "00:14:59.1",
	"offset-from-previous-event": "23.795s"
},{
	"type": "Line",
	"cell index": 19,
	"cell type": "markdown",
	"line number": 5,
	"line text": "Unfortunately, in most cases, it's probably not feasible to ask every single person we're interested in. Instead, we can only take samples of the whole population. In these cases, we would want to draw inferences not with a normal distribution, but by using something called a t-distribution. ",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:12:25 PM",
	"offset-from-start": "00:15:00.0",
	"offset-from-previous-event": "0.901s"
},{
	"type": "Line",
	"cell index": 19,
	"cell type": "markdown",
	"line number": 5,
	"line text": "Unfortunately, in most cases, it's probably not feasible to ask every single person we're interested in. Instead, we can only take samples of the whole population. In these cases, we would want to draw inferences not with a normal distribution, but by using something called a t-distribution. ",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:12:49 PM",
	"offset-from-start": "00:15:23.9",
	"offset-from-previous-event": "23.976s"
},{
	"type": "Render",
	"cell index": 19,
	"cell text": "### Population Versus Samples: t-Distribution\n\nIn the case above, we somehow magically knew the firm's mean number of defects and standard deviation. In that case, looking at a normal distribution is appropriate. Another random variable that's normally distributed might be people's heights. If we ask everyone in the world to report their height, we could compute a mean and standard deviation for the entire population. \n\nUnfortunately, in most cases, it's probably not feasible to ask every single person we're interested in. Instead, we can only take samples of the whole population. In these cases, we would want to draw inferences not with a normal distribution, but by using something called a t-distribution. ",
	"timestamp": "2:12:49 PM",
	"offset-from-start": "00:15:23.9",
	"offset-from-previous-event": "0.01s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 1,
	"line text": "#The t-distribution takes in a parameter df, which stands for degrees of freedom. This is equal to ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:12:53 PM",
	"offset-from-start": "00:15:27.3",
	"offset-from-previous-event": "3.4s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 2,
	"line text": "#your sample size N, minus 1 (df = N-1). Below, we overlay a normal distribution and several ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:02 PM",
	"offset-from-start": "00:15:36.4",
	"offset-from-previous-event": "9.007s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 3,
	"line text": "#t-distributions with varying degrees of freedom. ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:07 PM",
	"offset-from-start": "00:15:41.3",
	"offset-from-previous-event": "4.896s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 4,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:16 PM",
	"offset-from-start": "00:15:50.7",
	"offset-from-previous-event": "9.476s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 5,
	"line text": "rv1 = stats.t(df=2)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:17 PM",
	"offset-from-start": "00:15:51.5",
	"offset-from-previous-event": "0.765s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 6,
	"line text": "x1 = np.linspace(rv1.ppf(0.0001), rv1.ppf(0.9999), 1000)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:18 PM",
	"offset-from-start": "00:15:52.2",
	"offset-from-previous-event": "0.664s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 7,
	"line text": "y1 = rv1.pdf(x1)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:18 PM",
	"offset-from-start": "00:15:52.8",
	"offset-from-previous-event": "0.68s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 8,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:19 PM",
	"offset-from-start": "00:15:53.6",
	"offset-from-previous-event": "0.76s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 9,
	"line text": "rv2 = stats.t(df=5)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:20 PM",
	"offset-from-start": "00:15:54.3",
	"offset-from-previous-event": "0.752s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 10,
	"line text": "x2 = np.linspace(rv2.ppf(0.0001), rv2.ppf(0.9999), 100)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:21 PM",
	"offset-from-start": "00:15:55.5",
	"offset-from-previous-event": "1.121s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 11,
	"line text": "y2 = rv2.pdf(x2)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:22 PM",
	"offset-from-start": "00:15:56.4",
	"offset-from-previous-event": "0.911s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 12,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:23 PM",
	"offset-from-start": "00:15:57.5",
	"offset-from-previous-event": "1.08s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 13,
	"line text": "rv3 = stats.t(df=20)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:24 PM",
	"offset-from-start": "00:15:58.9",
	"offset-from-previous-event": "1.417s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 14,
	"line text": "x3 = np.linspace(rv3.ppf(0.0001), rv3.ppf(0.9999), 100)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:29 PM",
	"offset-from-start": "00:16:03.5",
	"offset-from-previous-event": "4.6s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 15,
	"line text": "y3 = rv3.pdf(x3)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:30 PM",
	"offset-from-start": "00:16:04.7",
	"offset-from-previous-event": "1.247s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 16,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:31 PM",
	"offset-from-start": "00:16:05.7",
	"offset-from-previous-event": "0.977s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 17,
	"line text": "rv4 = stats.norm()",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:32 PM",
	"offset-from-start": "00:16:06.7",
	"offset-from-previous-event": "0.967s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 18,
	"line text": "x4 = np.linspace(rv4.ppf(0.0001), rv4.ppf(0.9999), 100)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:33 PM",
	"offset-from-start": "00:16:07.5",
	"offset-from-previous-event": "0.88s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 19,
	"line text": "y4 = rv4.pdf(x4)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:34 PM",
	"offset-from-start": "00:16:08.6",
	"offset-from-previous-event": "1.072s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 20,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:35 PM",
	"offset-from-start": "00:16:09.7",
	"offset-from-previous-event": "1.096s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 21,
	"line text": "plt.xlim(-3, 3)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:36 PM",
	"offset-from-start": "00:16:11.1",
	"offset-from-previous-event": "1.361s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 22,
	"line text": "plt.plot(x1,y1, label=\"$df=2$\")",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:38 PM",
	"offset-from-start": "00:16:12.5",
	"offset-from-previous-event": "1.375s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 23,
	"line text": "plt.plot(x2,y2, label=\"$df=5$\")",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:39 PM",
	"offset-from-start": "00:16:13.6",
	"offset-from-previous-event": "1.144s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 24,
	"line text": "plt.plot(x3,y3, label=\"$df=20$\")",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:40 PM",
	"offset-from-start": "00:16:14.7",
	"offset-from-previous-event": "1.064s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 25,
	"line text": "plt.plot(x4,y4, ':', label=\"$N(\\mu=0$, $\\sigma=1)$\")",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:43 PM",
	"offset-from-start": "00:16:17.9",
	"offset-from-previous-event": "3.28s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 26,
	"line text": "plt.legend()",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:45 PM",
	"offset-from-start": "00:16:19.4",
	"offset-from-previous-event": "1.447s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 27,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:48 PM",
	"offset-from-start": "00:16:22.6",
	"offset-from-previous-event": "3.242s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 28,
	"line text": "#Notice that the t-distribution has fatter tails than a normal distribution. But, as N approaches ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:13:50 PM",
	"offset-from-start": "00:16:24.5",
	"offset-from-previous-event": "1.854s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 29,
	"line text": "#infinity (we have a larger sample size), the t-distribution is closer and closer to being a ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:14:04 PM",
	"offset-from-start": "00:16:38.6",
	"offset-from-previous-event": "14.137s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 30,
	"line text": "#standard normal curve (that's a normal distribution with mean 0 and variance 1, which is shown ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:14:09 PM",
	"offset-from-start": "00:16:43.3",
	"offset-from-previous-event": "4.71s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 31,
	"line text": "#by the dotted red line)",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:14:24 PM",
	"offset-from-start": "00:16:58.2",
	"offset-from-previous-event": "14.845s"
},{
	"type": "Line",
	"cell index": 20,
	"cell type": "code",
	"line number": 31,
	"line text": "#by the dotted red line)",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:14:25 PM",
	"offset-from-start": "00:16:59.2",
	"offset-from-previous-event": "1.012s"
},{
	"type": "Execution",
	"cell index": 20,
	"cell text": "#The t-distribution takes in a parameter df, which stands for degrees of freedom. This is equal to \n#your sample size N, minus 1 (df = N-1). Below, we overlay a normal distribution and several \n#t-distributions with varying degrees of freedom. \n\nrv1 = stats.t(df=2)\nx1 = np.linspace(rv1.ppf(0.0001), rv1.ppf(0.9999), 1000)\ny1 = rv1.pdf(x1)\n\nrv2 = stats.t(df=5)\nx2 = np.linspace(rv2.ppf(0.0001), rv2.ppf(0.9999), 100)\ny2 = rv2.pdf(x2)\n\nrv3 = stats.t(df=20)\nx3 = np.linspace(rv3.ppf(0.0001), rv3.ppf(0.9999), 100)\ny3 = rv3.pdf(x3)\n\nrv4 = stats.norm()\nx4 = np.linspace(rv4.ppf(0.0001), rv4.ppf(0.9999), 100)\ny4 = rv4.pdf(x4)\n\nplt.xlim(-3, 3)\nplt.plot(x1,y1, label=\"$df=2$\")\nplt.plot(x2,y2, label=\"$df=5$\")\nplt.plot(x3,y3, label=\"$df=20$\")\nplt.plot(x4,y4, ':', label=\"$N(\\mu=0$, $\\sigma=1)$\")\nplt.legend()\n\n#Notice that the t-distribution has fatter tails than a normal distribution. But, as N approaches \n#infinity (we have a larger sample size), the t-distribution is closer and closer to being a \n#standard normal curve (that's a normal distribution with mean 0 and variance 1, which is shown \n#by the dotted red line)",
	"timestamp": "2:14:25 PM",
	"offset-from-start": "00:16:59.2",
	"offset-from-previous-event": "0.006s"
},{
	"type": "Line",
	"cell index": 21,
	"cell type": "markdown",
	"line number": 1,
	"line text": "### Sampling Distributions and the Central Limit Theorem",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:14:27 PM",
	"offset-from-start": "00:17:01.7",
	"offset-from-previous-event": "2.548s"
},{
	"type": "Line",
	"cell index": 21,
	"cell type": "markdown",
	"line number": 1,
	"line text": "### Sampling Distributions and the Central Limit Theorem",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:14:28 PM",
	"offset-from-start": "00:17:02.9",
	"offset-from-previous-event": "1.126s"
},{
	"type": "Render",
	"cell index": 21,
	"cell text": "### Sampling Distributions and the Central Limit Theorem",
	"timestamp": "2:14:28 PM",
	"offset-from-start": "00:17:02.9",
	"offset-from-previous-event": "0.009s"
},{
	"type": "Line",
	"cell index": 22,
	"cell type": "markdown",
	"line number": 1,
	"line text": "Recall from a previous lecture where we talked about standardizing variables or computing a z-score; we can find the z-score of a single sample as follows:",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:14:31 PM",
	"offset-from-start": "00:17:06.0",
	"offset-from-previous-event": "3.144s"
},{
	"type": "Line",
	"cell index": 22,
	"cell type": "markdown",
	"line number": 2,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:14:42 PM",
	"offset-from-start": "00:17:16.4",
	"offset-from-previous-event": "10.355s"
},{
	"type": "Line",
	"cell index": 22,
	"cell type": "markdown",
	"line number": 3,
	"line text": "$$ z_i = \\frac{x_i - \\mu}{\\sigma} $$",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:14:43 PM",
	"offset-from-start": "00:17:17.2",
	"offset-from-previous-event": "0.799s"
},{
	"type": "Line",
	"cell index": 22,
	"cell type": "markdown",
	"line number": 4,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:14:43 PM",
	"offset-from-start": "00:17:18.0",
	"offset-from-previous-event": "0.801s"
},{
	"type": "Line",
	"cell index": 22,
	"cell type": "markdown",
	"line number": 5,
	"line text": "However, what if we repeatedly take multiple samples, and then plot the mean of each sample in a so called \"sampling distribution\" instead? What would this distribution even look like? To find out, let's just take a bunch of samples (with the help of a computer of course), and then see what happens.",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:14:45 PM",
	"offset-from-start": "00:17:19.3",
	"offset-from-previous-event": "1.327s"
},{
	"type": "Line",
	"cell index": 22,
	"cell type": "markdown",
	"line number": 5,
	"line text": "However, what if we repeatedly take multiple samples, and then plot the mean of each sample in a so called \"sampling distribution\" instead? What would this distribution even look like? To find out, let's just take a bunch of samples (with the help of a computer of course), and then see what happens.",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:15:30 PM",
	"offset-from-start": "00:18:04.2",
	"offset-from-previous-event": "44.894s"
},{
	"type": "Render",
	"cell index": 22,
	"cell text": "Recall from a previous lecture where we talked about standardizing variables or computing a z-score; we can find the z-score of a single sample as follows:\n\n$$ z_i = \\frac{x_i - \\mu}{\\sigma} $$\n\nHowever, what if we repeatedly take multiple samples, and then plot the mean of each sample in a so called \"sampling distribution\" instead? What would this distribution even look like? To find out, let's just take a bunch of samples (with the help of a computer of course), and then see what happens.",
	"timestamp": "2:15:30 PM",
	"offset-from-start": "00:18:04.2",
	"offset-from-previous-event": "0.011s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 1,
	"line text": "%matplotlib notebook",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:15:32 PM",
	"offset-from-start": "00:18:06.8",
	"offset-from-previous-event": "2.584s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 2,
	"line text": "import numpy as np",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:15:33 PM",
	"offset-from-start": "00:18:07.7",
	"offset-from-previous-event": "0.9s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 3,
	"line text": "import pandas as pd",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:15:34 PM",
	"offset-from-start": "00:18:08.9",
	"offset-from-previous-event": "1.212s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 4,
	"line text": "import matplotlib.pyplot as plt",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:15:35 PM",
	"offset-from-start": "00:18:09.9",
	"offset-from-previous-event": "0.951s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 5,
	"line text": "import matplotlib.animation as animation",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:15:36 PM",
	"offset-from-start": "00:18:10.7",
	"offset-from-previous-event": "0.864s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 6,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:15:37 PM",
	"offset-from-start": "00:18:11.7",
	"offset-from-previous-event": "1.001s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 7,
	"line text": "#Let's create an animation to pull a random sample and plot the mean. ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:15:43 PM",
	"offset-from-start": "00:18:17.8",
	"offset-from-previous-event": "6.034s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 8,
	"line text": "#The number of iterations and sample size are adjustable below. You don't need to worry about understanding",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:15:48 PM",
	"offset-from-start": "00:18:23.0",
	"offset-from-previous-event": "5.284s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 9,
	"line text": "#this animation portion",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:15:57 PM",
	"offset-from-start": "00:18:31.8",
	"offset-from-previous-event": "8.731s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 10,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:15:58 PM",
	"offset-from-start": "00:18:32.5",
	"offset-from-previous-event": "0.702s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 11,
	"line text": "#Let's just use it to try sampling from different distributions",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:15:59 PM",
	"offset-from-start": "00:18:33.6",
	"offset-from-previous-event": "1.111s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 12,
	"line text": "iterations = 200",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:16:08 PM",
	"offset-from-start": "00:18:42.4",
	"offset-from-previous-event": "8.853s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 13,
	"line text": "n = 30 #sample size",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:16:11 PM",
	"offset-from-start": "00:18:45.1",
	"offset-from-previous-event": "2.704s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 14,
	"line text": "#We can play around with the distribution by commenting out the current line \"x=[-------]\" and replacing",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:16:15 PM",
	"offset-from-start": "00:18:49.3",
	"offset-from-previous-event": "4.128s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 15,
	"line text": "#it with a different one. ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:16:23 PM",
	"offset-from-start": "00:18:58.0",
	"offset-from-previous-event": "8.737s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 16,
	"line text": "x = [np.mean(np.random.randn(n)) for i in range(iterations)]",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:16:25 PM",
	"offset-from-start": "00:18:59.2",
	"offset-from-previous-event": "1.216s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 17,
	"line text": "#x = [np.mean(np.random.exponential(scale=1.0, size=n)) for i in range(iterations)]",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:16:25 PM",
	"offset-from-start": "00:19:00.0",
	"offset-from-previous-event": "0.79s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 18,
	"line text": "#x = [np.mean(np.random.uniform(low=-2.0, high=2.0, size=n)) for i in range(iterations)]",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:16:26 PM",
	"offset-from-start": "00:19:00.7",
	"offset-from-previous-event": "0.721s"
},{
	"type": "Line",
	"cell index": 23,
	"cell type": "code",
	"line number": 18,
	"line text": "#x = [np.mean(np.random.uniform(low=-2.0, high=2.0, size=n)) for i in range(iterations)]",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:16:27 PM",
	"offset-from-start": "00:19:01.9",
	"offset-from-previous-event": "1.132s"
},{
	"type": "Execution",
	"cell index": 23,
	"cell text": "%matplotlib notebook\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\n\n#Let's create an animation to pull a random sample and plot the mean. \n#The number of iterations and sample size are adjustable below. You don't need to worry about understanding\n#this animation portion\n\n#Let's just use it to try sampling from different distributions\niterations = 200\nn = 30 #sample size\n#We can play around with the distribution by commenting out the current line \"x=[-------]\" and replacing\n#it with a different one. \nx = [np.mean(np.random.randn(n)) for i in range(iterations)]\n#x = [np.mean(np.random.exponential(scale=1.0, size=n)) for i in range(iterations)]\n#x = [np.mean(np.random.uniform(low=-2.0, high=2.0, size=n)) for i in range(iterations)]",
	"timestamp": "2:16:27 PM",
	"offset-from-start": "00:19:01.9",
	"offset-from-previous-event": "0.007s"
},{
	"type": "Line",
	"cell index": 24,
	"cell type": "code",
	"line number": 1,
	"line text": "# create the function that will do the plotting, where curr is the current frame",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:16:32 PM",
	"offset-from-start": "00:19:07.1",
	"offset-from-previous-event": "5.207s"
},{
	"type": "Line",
	"cell index": 24,
	"cell type": "code",
	"line number": 2,
	"line text": "def update(curr):",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:16:41 PM",
	"offset-from-start": "00:19:15.3",
	"offset-from-previous-event": "8.251s"
},{
	"type": "Line",
	"cell index": 24,
	"cell type": "code",
	"line number": 3,
	"line text": "    # check if animation is at the last frame, and if so, stop the animation",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:16:43 PM",
	"offset-from-start": "00:19:17.6",
	"offset-from-previous-event": "2.289s"
},{
	"type": "Line",
	"cell index": 24,
	"cell type": "code",
	"line number": 4,
	"line text": "    if curr == iterations: ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:16:47 PM",
	"offset-from-start": "00:19:21.4",
	"offset-from-previous-event": "3.816s"
},{
	"type": "Line",
	"cell index": 24,
	"cell type": "code",
	"line number": 5,
	"line text": "        a.event_source.stop()",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:16:53 PM",
	"offset-from-start": "00:19:27.1",
	"offset-from-previous-event": "5.693s"
},{
	"type": "Line",
	"cell index": 24,
	"cell type": "code",
	"line number": 6,
	"line text": "    plt.cla()",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:16:53 PM",
	"offset-from-start": "00:19:28.0",
	"offset-from-previous-event": "0.864s"
},{
	"type": "Line",
	"cell index": 24,
	"cell type": "code",
	"line number": 7,
	"line text": "    bins = np.arange(-2, 2, 0.1)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:16:57 PM",
	"offset-from-start": "00:19:31.1",
	"offset-from-previous-event": "3.129s"
},{
	"type": "Line",
	"cell index": 24,
	"cell type": "code",
	"line number": 8,
	"line text": "    plt.hist(x[:curr], bins=bins)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:16:58 PM",
	"offset-from-start": "00:19:33.0",
	"offset-from-previous-event": "1.855s"
},{
	"type": "Line",
	"cell index": 24,
	"cell type": "code",
	"line number": 9,
	"line text": "    plt.axis([-2,2,0,60])",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:17:00 PM",
	"offset-from-start": "00:19:35.0",
	"offset-from-previous-event": "2.024s"
},{
	"type": "Line",
	"cell index": 24,
	"cell type": "code",
	"line number": 10,
	"line text": "    plt.gca().set_title('Sampling the Normal Distribution')",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:17:02 PM",
	"offset-from-start": "00:19:36.8",
	"offset-from-previous-event": "1.792s"
},{
	"type": "Line",
	"cell index": 24,
	"cell type": "code",
	"line number": 11,
	"line text": "    plt.gca().set_ylabel('Frequency')",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:17:03 PM",
	"offset-from-start": "00:19:37.7",
	"offset-from-previous-event": "0.872s"
},{
	"type": "Line",
	"cell index": 24,
	"cell type": "code",
	"line number": 12,
	"line text": "    plt.gca().set_xlabel('Value')",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:17:04 PM",
	"offset-from-start": "00:19:38.5",
	"offset-from-previous-event": "0.839s"
},{
	"type": "Line",
	"cell index": 24,
	"cell type": "code",
	"line number": 13,
	"line text": "    plt.annotate('iter = {}\\n n = {}'.format(curr, n), [-1.5,40])",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:17:05 PM",
	"offset-from-start": "00:19:40.0",
	"offset-from-previous-event": "1.451s"
},{
	"type": "Line",
	"cell index": 24,
	"cell type": "code",
	"line number": 13,
	"line text": "    plt.annotate('iter = {}\\n n = {}'.format(curr, n), [-1.5,40])",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:17:06 PM",
	"offset-from-start": "00:19:40.9",
	"offset-from-previous-event": "0.988s"
},{
	"type": "Execution",
	"cell index": 24,
	"cell text": "# create the function that will do the plotting, where curr is the current frame\ndef update(curr):\n    # check if animation is at the last frame, and if so, stop the animation\n    if curr == iterations: \n        a.event_source.stop()\n    plt.cla()\n    bins = np.arange(-2, 2, 0.1)\n    plt.hist(x[:curr], bins=bins)\n    plt.axis([-2,2,0,60])\n    plt.gca().set_title('Sampling the Normal Distribution')\n    plt.gca().set_ylabel('Frequency')\n    plt.gca().set_xlabel('Value')\n    plt.annotate('iter = {}\\n n = {}'.format(curr, n), [-1.5,40])",
	"timestamp": "2:17:06 PM",
	"offset-from-start": "00:19:40.9",
	"offset-from-previous-event": "0.007s"
},{
	"type": "Line",
	"cell index": 25,
	"cell type": "code",
	"line number": 1,
	"line text": "fig = plt.figure()",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:17:08 PM",
	"offset-from-start": "00:19:42.6",
	"offset-from-previous-event": "1.699s"
},{
	"type": "Line",
	"cell index": 25,
	"cell type": "code",
	"line number": 2,
	"line text": "a = animation.FuncAnimation(fig, update, interval=50)",
	"move cursor": true,
	"next cell": false,
	"timestamp": "2:17:09 PM",
	"offset-from-start": "00:19:43.7",
	"offset-from-previous-event": "1.09s"
},{
	"type": "Line",
	"cell index": 25,
	"cell type": "code",
	"line number": 2,
	"line text": "a = animation.FuncAnimation(fig, update, interval=50)",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:17:10 PM",
	"offset-from-start": "00:19:45.1",
	"offset-from-previous-event": "1.316s"
},{
	"type": "Execution",
	"cell index": 25,
	"cell text": "fig = plt.figure()\na = animation.FuncAnimation(fig, update, interval=50)",
	"timestamp": "2:17:10 PM",
	"offset-from-start": "00:19:45.1",
	"offset-from-previous-event": "0.012s"
},{
	"type": "Line",
	"cell index": 26,
	"cell type": "markdown",
	"line number": 1,
	"line text": "Notice that the distribution is also normal, and it has mean roughly equal to 0 with a standard deviation of $\\sigma/\\sqrt{n}$, also known as the **standard error**, where n is the size of our samples. The z-score of the sampling distribution is just,",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:17:19 PM",
	"offset-from-start": "00:19:53.8",
	"offset-from-previous-event": "8.766s"
},{
	"type": "Line",
	"cell index": 26,
	"cell type": "markdown",
	"line number": 2,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:17:43 PM",
	"offset-from-start": "00:20:17.5",
	"offset-from-previous-event": "23.655s"
},{
	"type": "Line",
	"cell index": 26,
	"cell type": "markdown",
	"line number": 3,
	"line text": "$$ z = \\frac{\\bar{x} - \\mu}{\\sigma/\\sqrt{n}} .$$",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:17:44 PM",
	"offset-from-start": "00:20:18.3",
	"offset-from-previous-event": "0.808s"
},{
	"type": "Line",
	"cell index": 26,
	"cell type": "markdown",
	"line number": 4,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:17:45 PM",
	"offset-from-start": "00:20:19.5",
	"offset-from-previous-event": "1.177s"
},{
	"type": "Line",
	"cell index": 26,
	"cell type": "markdown",
	"line number": 5,
	"line text": "This looks almost the same as the previous equation, but with a few key differences. For starters, we're taking a difference between individual sample means ($\\bar{x}$) and the population mean ($\\mu$). Also, we use the standard error instead. ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:17:46 PM",
	"offset-from-start": "00:20:20.6",
	"offset-from-previous-event": "1.151s"
},{
	"type": "Line",
	"cell index": 26,
	"cell type": "markdown",
	"line number": 6,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:18:05 PM",
	"offset-from-start": "00:20:40.0",
	"offset-from-previous-event": "19.359s"
},{
	"type": "Line",
	"cell index": 26,
	"cell type": "markdown",
	"line number": 7,
	"line text": "The cool thing is that the **Central Limit Theorem** states that this holds true even if we take samples from a non-normal distribution. Feel free to try sampling from the uniform distribution and exponential distributions by uncommenting out the appropriate lines above. One more thing to note, this is only valid if our sample size is sufficiently large. The rule of thumb is than $n \\geq 30$. Try changing this and see what happens!",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:18:12 PM",
	"offset-from-start": "00:20:46.5",
	"offset-from-previous-event": "6.526s"
},{
	"type": "Line",
	"cell index": 26,
	"cell type": "markdown",
	"line number": 8,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:18:57 PM",
	"offset-from-start": "00:21:32.0",
	"offset-from-previous-event": "45.487s"
},{
	"type": "Line",
	"cell index": 26,
	"cell type": "markdown",
	"line number": 9,
	"line text": "--------------------------",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:18:59 PM",
	"offset-from-start": "00:21:33.7",
	"offset-from-previous-event": "1.687s"
},{
	"type": "Line",
	"cell index": 26,
	"cell type": "markdown",
	"line number": 10,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:19:00 PM",
	"offset-from-start": "00:21:34.8",
	"offset-from-previous-event": "1.108s"
},{
	"type": "Line",
	"cell index": 26,
	"cell type": "markdown",
	"line number": 11,
	"line text": "When we don't know the population standard deviation (or have really small samples), we have to instead calculate a t-score,",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:19:09 PM",
	"offset-from-start": "00:21:43.2",
	"offset-from-previous-event": "8.388s"
},{
	"type": "Line",
	"cell index": 26,
	"cell type": "markdown",
	"line number": 12,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:19:19 PM",
	"offset-from-start": "00:21:53.8",
	"offset-from-previous-event": "10.674s"
},{
	"type": "Line",
	"cell index": 26,
	"cell type": "markdown",
	"line number": 13,
	"line text": "$$ t = \\frac{\\bar{x} - \\mu}{s/\\sqrt{n}} ,$$",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:19:20 PM",
	"offset-from-start": "00:21:54.9",
	"offset-from-previous-event": "1.047s"
},{
	"type": "Line",
	"cell index": 26,
	"cell type": "markdown",
	"line number": 14,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:19:21 PM",
	"offset-from-start": "00:21:56.1",
	"offset-from-previous-event": "1.161s"
},{
	"type": "Line",
	"cell index": 26,
	"cell type": "markdown",
	"line number": 15,
	"line text": "where $s$ is exactly how you'd calculate a standard deviation normally, just with a slight correction:",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:19:22 PM",
	"offset-from-start": "00:21:56.8",
	"offset-from-previous-event": "0.76s"
},{
	"type": "Line",
	"cell index": 26,
	"cell type": "markdown",
	"line number": 16,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:19:23 PM",
	"offset-from-start": "00:21:57.7",
	"offset-from-previous-event": "0.896s"
},{
	"type": "Line",
	"cell index": 26,
	"cell type": "markdown",
	"line number": 17,
	"line text": "$$ s = \\sqrt{\\frac{\\sum(x_i-\\bar{x})^2}{n-1}} $$",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:19:24 PM",
	"offset-from-start": "00:21:58.6",
	"offset-from-previous-event": "0.92s"
},{
	"type": "Line",
	"cell index": 26,
	"cell type": "markdown",
	"line number": 18,
	"line text": "",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:19:25 PM",
	"offset-from-start": "00:21:59.4",
	"offset-from-previous-event": "0.782s"
},{
	"type": "Render",
	"cell index": 26,
	"cell text": "Notice that the distribution is also normal, and it has mean roughly equal to 0 with a standard deviation of $\\sigma/\\sqrt{n}$, also known as the **standard error**, where n is the size of our samples. The z-score of the sampling distribution is just,\n\n$$ z = \\frac{\\bar{x} - \\mu}{\\sigma/\\sqrt{n}} .$$\n\nThis looks almost the same as the previous equation, but with a few key differences. For starters, we're taking a difference between individual sample means ($\\bar{x}$) and the population mean ($\\mu$). Also, we use the standard error instead. \n\nThe cool thing is that the **Central Limit Theorem** states that this holds true even if we take samples from a non-normal distribution. Feel free to try sampling from the uniform distribution and exponential distributions by uncommenting out the appropriate lines above. One more thing to note, this is only valid if our sample size is sufficiently large. The rule of thumb is than $n \\geq 30$. Try changing this and see what happens!\n\n--------------------------\n\nWhen we don't know the population standard deviation (or have really small samples), we have to instead calculate a t-score,\n\n$$ t = \\frac{\\bar{x} - \\mu}{s/\\sqrt{n}} ,$$\n\nwhere $s$ is exactly how you'd calculate a standard deviation normally, just with a slight correction:\n\n$$ s = \\sqrt{\\frac{\\sum(x_i-\\bar{x})^2}{n-1}} $$\n",
	"timestamp": "2:19:25 PM",
	"offset-from-start": "00:21:59.4",
	"offset-from-previous-event": "0.019s"
},{
	"type": "Line",
	"cell index": 27,
	"cell type": "markdown",
	"line number": 1,
	"line text": "### Relationships: Choosing between distributions",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:19:28 PM",
	"offset-from-start": "00:22:02.4",
	"offset-from-previous-event": "2.999s"
},{
	"type": "Line",
	"cell index": 27,
	"cell type": "markdown",
	"line number": 2,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:19:29 PM",
	"offset-from-start": "00:22:03.3",
	"offset-from-previous-event": "0.84s"
},{
	"type": "Line",
	"cell index": 27,
	"cell type": "markdown",
	"line number": 3,
	"line text": "This was quite a bit of material for one lecture! But, keep in mind that you don't need to memorize all of these distributions and their corresponding pdfs and cdfs. The important takeaway is that distributions help us model particular scenarios, and which one you choose will depend on the application you're working on. Also, there's a difference between looking at an entire population of interest, and taking samples from a population. Fortunately, the CLT provides us with some powerful insights that will allow us to compute statistics and draw inferences about your data, which we'll go over in the next section.",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:19:31 PM",
	"offset-from-start": "00:22:05.6",
	"offset-from-previous-event": "2.32s"
},{
	"type": "Line",
	"cell index": 27,
	"cell type": "markdown",
	"line number": 4,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:20:15 PM",
	"offset-from-start": "00:22:50.0",
	"offset-from-previous-event": "44.395s"
},{
	"type": "Line",
	"cell index": 27,
	"cell type": "markdown",
	"line number": 5,
	"line text": "If you ever find yourself needing some help with picking the correct distribution, here's a list of resources that might help.",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:20:16 PM",
	"offset-from-start": "00:22:51.1",
	"offset-from-previous-event": "1.088s"
},{
	"type": "Line",
	"cell index": 27,
	"cell type": "markdown",
	"line number": 6,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:20:29 PM",
	"offset-from-start": "00:23:04.0",
	"offset-from-previous-event": "12.954s"
},{
	"type": "Line",
	"cell index": 27,
	"cell type": "markdown",
	"line number": 7,
	"line text": "http://www.math.wm.edu/~leemis/chart/UDR/UDR.html",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:20:30 PM",
	"offset-from-start": "00:23:04.8",
	"offset-from-previous-event": "0.775s"
},{
	"type": "Line",
	"cell index": 27,
	"cell type": "markdown",
	"line number": 8,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:20:31 PM",
	"offset-from-start": "00:23:05.5",
	"offset-from-previous-event": "0.68s"
},{
	"type": "Line",
	"cell index": 27,
	"cell type": "markdown",
	"line number": 9,
	"line text": "http://people.stern.nyu.edu/adamodar/New_Home_Page/StatFile/statdistns.htm",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:20:32 PM",
	"offset-from-start": "00:23:06.2",
	"offset-from-previous-event": "0.68s"
},{
	"type": "Line",
	"cell index": 27,
	"cell type": "markdown",
	"line number": 10,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:20:32 PM",
	"offset-from-start": "00:23:06.8",
	"offset-from-previous-event": "0.68s"
},{
	"type": "Line",
	"cell index": 27,
	"cell type": "markdown",
	"line number": 11,
	"line text": "https://blog.cloudera.com/blog/2015/12/common-probability-distributions-the-data-scientists-crib-sheet/",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:20:33 PM",
	"offset-from-start": "00:23:07.5",
	"offset-from-previous-event": "0.632s"
},{
	"type": "Line",
	"cell index": 27,
	"cell type": "markdown",
	"line number": 12,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:20:34 PM",
	"offset-from-start": "00:23:08.1",
	"offset-from-previous-event": "0.664s"
},{
	"type": "Line",
	"cell index": 27,
	"cell type": "markdown",
	"line number": 13,
	"line text": "And just for fun, here's a neat diagram showcasing a number of different distributions we didn't have time to go over and how they relate to each other, just in case you want to explore more on your own. (There's an even more detailed one in the links!)",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:20:34 PM",
	"offset-from-start": "00:23:09.0",
	"offset-from-previous-event": "0.897s"
},{
	"type": "Line",
	"cell index": 27,
	"cell type": "markdown",
	"line number": 14,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:20:49 PM",
	"offset-from-start": "00:23:23.5",
	"offset-from-previous-event": "14.44s"
},{
	"type": "Line",
	"cell index": 27,
	"cell type": "markdown",
	"line number": 15,
	"line text": "![distributions](distributions.png) ",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:20:50 PM",
	"offset-from-start": "00:23:24.5",
	"offset-from-previous-event": "1.026s"
},{
	"type": "Line",
	"cell index": 27,
	"cell type": "markdown",
	"line number": 16,
	"line text": "",
	"move cursor": false,
	"next cell": false,
	"timestamp": "2:20:51 PM",
	"offset-from-start": "00:23:25.6",
	"offset-from-previous-event": "1.138s"
},{
	"type": "Line",
	"cell index": 27,
	"cell type": "markdown",
	"line number": 17,
	"line text": "",
	"move cursor": false,
	"next cell": true,
	"timestamp": "2:20:52 PM",
	"offset-from-start": "00:23:26.6",
	"offset-from-previous-event": "0.947s"
},{
	"type": "Render",
	"cell index": 27,
	"cell text": "### Relationships: Choosing between distributions\n\nThis was quite a bit of material for one lecture! But, keep in mind that you don't need to memorize all of these distributions and their corresponding pdfs and cdfs. The important takeaway is that distributions help us model particular scenarios, and which one you choose will depend on the application you're working on. Also, there's a difference between looking at an entire population of interest, and taking samples from a population. Fortunately, the CLT provides us with some powerful insights that will allow us to compute statistics and draw inferences about your data, which we'll go over in the next section.\n\nIf you ever find yourself needing some help with picking the correct distribution, here's a list of resources that might help.\n\nhttp://www.math.wm.edu/~leemis/chart/UDR/UDR.html\n\nhttp://people.stern.nyu.edu/adamodar/New_Home_Page/StatFile/statdistns.htm\n\nhttps://blog.cloudera.com/blog/2015/12/common-probability-distributions-the-data-scientists-crib-sheet/\n\nAnd just for fun, here's a neat diagram showcasing a number of different distributions we didn't have time to go over and how they relate to each other, just in case you want to explore more on your own. (There's an even more detailed one in the links!)\n\n![distributions](distributions.png) \n\n",
	"timestamp": "2:20:52 PM",
	"offset-from-start": "00:23:26.6",
	"offset-from-previous-event": "0.013s"
},{
	"type": "end",
	"timestamp": "2:21:52 PM",
	"total recording time": "00:24:26.1",
	"offset-from-start": "00:24:26.1",
	"offset-from-previous-event": "59.52s"
}